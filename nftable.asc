=== NFTABLES

NFTABLES es la evolución hacia el filtrado de paquetes que hasta ahora representaba _iptables_.

* Está disponible desde kernels Linux 3.13
* Tiene una nueva interfaz de comando cuya sintaxis es diferente de iptables
* Proporciona una nueva infraestructura que permite construir mapas y concatenaciones. Esta nueva característica le permite organizar un conjunto de reglas en un árbol multidimensional, lo que reduce la cantidad de reglas que deben consultarse drásticamente hasta encontrar la acción que se aplica en el paquete.


==== ¿Por qué usar NFTABLES?

* Evita la duplicación de código y las inconsistencias.
* Ordene los paquetes más rápido con un conjunto de mapeo de datos mejorado
* Simplifica la administración de ipv4 e ipv6 con una nueva familia, _inet_, que le permite registrar cadenas que pueden ver el tráfico ipv4 e ipv6
* Proporciona una API de Netlink para aplicaciones de terceros.
* Proporciona una sintaxis más amigable y compacta

===== **Ganchos Netfilter (Netfilter Hooks)**

nftables reutiliza la infraestructura de enlace existente, el sistema de seguimiento de conexiones, el motor NAT, el registro de infraestructura, la gestión de colas, etc. Por lo tanto, solo se ha reemplazado la infraestructura de clasificación de paquetes.

_Aquí hay una representación de estos ganchos (hooks):_

image::nf25.PNG[align="center"]

Básicamente, el flujo de tráfico entrante a la máquina local verá el enlace entrante y el enrutamiento previo. Luego, _el tráfico generado por los procesos locales sigue la ruta de salida y el enrutamiento posterior_. Ruta superior en el gráfico anterior.
Y luego, los paquetes que no están destinados a nuestra máquina serán vistos por el gancho (hook) de entrada (previo a la decisión de enrutamiento). En resumen, los paquetes que no se dirigen a un proceso local (como un servidor Web) seguirán esta ruta: #prerouting -> decisión de enrutamiento -> forward -> postrouting. Ruta inferior en el gráfico anterior.#

===== **GANCHO (HOOK) DE ENTRADA (INGRESS)**

Desde el kernel 4.2 de Linux, Netfilter también viene con un enlace de entrada que se puede usar desde nftables. Entonces el proceso ahora será el siguiente:

image::nf26.PNG[align="center"]


==== Trabajar con TABLAS

NFTABLES se compone de tablas, y tablas de cadenas. Similar a iptables.
Lo primero que tenemos que hacer para comenzar a trabajar con nftables es agregar al menos una tabla. Luego, podemos agregar cadenas y agregaremos las reglas a esas cadenas.

**Tenemos seis tipos diferentes de tablas según la familia a la que pertenecen:**

* Ip (ipv4)
* arp
* ip6
* Bridge
* inet, que está disponible desde el kernel de Linux 3.14. Esta tabla es una tabla híbrida IPV4 + IPV6 que debería ayudar a simplificar la carga de la administración de firewall doble. Por lo tanto, las cadenas que registramos en esta tabla servirán para ver el tráfico IPv4 e IPv6.
* netdev, disponible desde el kernel 4.2 de Linux. Esta familia viene con un enlace de entrada que se puede usar para registrar una cadena que filtra en una etapa muy temprana, es decir, antes del enrutamiento, como una alternativa a la infraestructura existente.

==== MANUAL DE CONFIGURACIÓN 

> Primero vamos a instalar nftables con el siguiente comando: 

[source,bash]
----
# apt install nftables
----
image::nf1.PNG[align="center"]
---

> Verificar de manera elegante que el paquete si este instalado con el comando: 

[source,bash]
----
# apt-cache search nftables
----
image::nf2.PNG[align="center"]
---

> Verificar el estado de este servicio: 

[source,bash]
----
# service nftables status
----
image::nf3.PNG[align="center"]

Podemos verificar que esta activo. La orden #systemctl enable nftables.service# establece que el servicio nftables arranque con el sistema.
---

> Si el sistema arranca el siguiente fichero también arranca: 

[source,bash]
----
# cat /etc/nftables.conf
----
image::nf4.PNG[align="center"]

Generalmente aparece de esta manera, cuando se es configurado por primera vez, este fichero no tiene nada prácticamente ya que borra cualquier tipo de regla y no establece reglas de cadenas. 
_Configurando y aprendiendo un poco sobre este fichero ejecute algunos cambios como prueba del mismo:_

image::nf5.PNG[align="center"]
---

> Vamos a realizar un script, primero vamos a ver las reglas definidas:

[source,bash]
----
# nft list ruleset
----
image::nf6.PNG[align="center"]
---

> Necesitamos saber la ip de nuestra máquina para ello será lo siguiente: 

[source,bash]
----
# ip a
----
image::nf7.PNG[align="center"]
---

> Se creo una carpeta para realizar el script

image::nf8.PNG[align="center"]

---

==== Script

Definamos las especificaciones del diseño 
Vamos a configurar un firewall en un Servidor con una sola interface de red,  La IP de nuestra máquina es la **10.0.2.0/24.**
Los criterios son los siguientes:

* Borrar las reglas iniciales que puedan existir.
* Solo nos preocuparemos de IPv4, dejando ipv6, nat, mangle, etc.. para ejemplos posteriores.
* Política por defecto DROP en nuestra máquina
* Permitir acceso ssh al servidor desde cualquier máquina de la red local
* Permitir tráfico de salida dns **(udp/53)**
* Permitir tráfico de salida http, https, ssh **(tcp/22,tcp/80,tcp/443)**
* Queremos llevar cuenta de los paquetes que cumplen cada regla para estudio y optimización posterior del firewall.

[source,bash]
----
# nano reglas.nft
----

image::nf9.PNG[align="center"]

**Uso de Variable**

image::nf10.PNG[align="center"]

#22 es para ssh, 80 es http, y 443 es para https.#

---

image::nf11.PNG[align="center"]
Nuestra tabla se llama filtrado, se puede usar ip, ip6, inet.

---

image::nf12.PNG[align="center"]
INPUT, FORWARD, OUTPUT son las cadenas pueden tener cualquier nombre y lo que se debe respetar son los hooks. 
*Input= Todas las reglas que me interesan que vayan en destino a mi maquina local.

*Forward= bloque de reglas donde pasa el servidor.

*Output= Pasaran todas las reglas que desde mi maquina salgan hacia externas.
Max prioridad es 0. 

---
image::nf13.PNG[align="center"]
Permitir el tráfico sobre loopback, donde se agrega la cadena de regla, esto es como tener en iptable: #iptables -A INPUT -i o -h ACCEPT#

---

image::nf14.PNG[align="center"]
Toma las redes locales y activar los contadores. Se permite el trafico de entrada y de salida

---

image::nf15.PNG[align="center"]
#$udpSI# toma las consulas DNS, luego la conexión entra por ssh. No hay bucle solo se repiten instrucciones de cada valor. nft se encarga de aplicar las reglas de OUTPUT e INPUT a todos los puertos definidos en las variables **udpSI y tcpSI**. NO es necesario un bucle como con iptables. Al menos pare esto.


Para ejecutarlo bastará con llamar al script desde la línea de comandos

image::nf16.PNG[align="center"]

---

En el siguiente paso vemos que no necesita permisos para ser ejecutado y vemos el ruleset, No es necesario que el Script **/root/fw/reglas.nft** tenga permiso de ejecución. Las reglas activas son las siguientes: 

image::nf17.PNG[align="center"]

---

Vamos a ejecutar un ping para ver el listado de las reglas ojo con 0 bytes y 0 accept en la imagen anterior, ahora veamos como estas cambian.

image::nf18.PNG[align="center"]

---

Vamos a correr el servidor apache

image::nf19.PNG[align="center"]

---

Pruebas con ping aquí vemos como mi política de drop y resolución ha funcionado

image::nf20.PNG[align="center"]

**nslookup funcionando correctamente**

image::nf21.PNG[align="center"]

**Podemos hacer update o upgrade con el script**

image::nf22.PNG[align="center"]

**Ahora si tenemos acceso.**

image::nf23.PNG[align="center"]

---